import os
import sys
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'src')))

print("\n".join(sys.path))
from data.milvus.indexing import MilvusIndexer
import os
import json
import redis
from datetime import datetime, timedelta
from typing import List, Dict, Optional
from llm.base import AgentClient
from pydantic_ai.models.gemini import GeminiModel
from pydantic_ai.providers.google_gla import GoogleGLAProvider
import chainlit as cl
from utils.basetools import *
from pydantic import BaseModel, Field

# Initialize Redis
redis_client = redis.Redis(host='localhost', port=6379, db=0)

# Initialize Milvus indexers (run once)
# indexer1 = MilvusIndexer(collection_name="clubs", faq_file="data/clubs_data.xlsx")
# indexer1.run()
# indexer2 = MilvusIndexer(collection_name="admissions", faq_file="data/admissions_data.xlsx")
# indexer2.run()

# Initialize model
provider = GoogleGLAProvider(api_key=os.getenv("GEMINI_API_KEY"))
model = GeminiModel('gemini-2.0-pro', provider=provider)

# --- New Tools Definitions ---
class ScheduleInput(BaseModel):
    subjects: List[str] = Field(..., description="Danh s√°ch m√¥n h·ªçc")
    free_slots: Dict[str, List[str]] = Field(..., description="Khung gi·ªù r·∫£nh d·∫°ng {'Th·ª©': ['9:00-11:00']}")

class ScheduleAdviceInput(BaseModel):
    current_schedule: Dict[str, List[str]] = Field(..., description="Th·ªùi kh√≥a bi·ªÉu hi·ªán t·∫°i")

class LocationSearchInput(BaseModel):
    query: str = Field(..., description="Nhu c·∫ßu t√¨m ki·∫øm ƒë·ªãa ƒëi·ªÉm")

class QuizInput(BaseModel):
    material: str = Field(..., description="N·ªôi dung t√†i li·ªáu √¥n t·∫≠p")

class ProgressInput(BaseModel):
    completed: List[str] = Field(..., description="C√°c b√†i ƒë√£ ho√†n th√†nh")
    total: List[str] = Field(..., description="To√†n b·ªô b√†i t·∫≠p c·∫ßn l√†m")

def schedule_planner_tool(input: ScheduleInput) -> str:
    """
    T·∫°o th·ªùi kh√≥a bi·ªÉu m·ªõi d·ª±a tr√™n m√¥n h·ªçc v√† khung gi·ªù r·∫£nh
    """
    # Logic t·∫°o l·ªãch h·ªçc (c√≥ th·ªÉ k·∫øt h·ª£p LLM)
    schedule = {}
    for day, slots in input.free_slots.items():
        schedule[day] = []
        for i, slot in enumerate(slots):
            if i < len(input.subjects):
                subject = input.subjects[i]
                schedule[day].append(f"{slot} - M√¥n: {subject}")
    
    # L∆∞u v√†o Redis
    user_id = cl.user_session.get("id")
    redis_client.set(f"schedule:{user_id}", json.dumps(schedule))
    
    return json.dumps(schedule, ensure_ascii=False)

def schedule_advisor_tool(input: ScheduleAdviceInput) -> str:
    """
    Ph√¢n t√≠ch v√† ƒë·ªÅ xu·∫•t c·∫£i thi·ªán th·ªùi kh√≥a bi·ªÉu
    """
    # Logic ph√¢n t√≠ch l·ªãch h·ªçc
    advice = "ƒê·ªÅ xu·∫•t:\n"
    for day, tasks in input.current_schedule.items():
        if len(tasks) > 3:
            advice += f"- {day}: Gi·∫£m t·∫£i t·ª´ {len(tasks)} xu·ªëng 3 m√¥n\n"
    
    # Ki·ªÉm tra ngh·ªâ ng∆°i
    advice += "\nL∆∞u √Ω: N√™n c√≥ √≠t nh·∫•t 30 ph√∫t ngh·ªâ gi·ªØa c√°c m√¥n h·ªçc"
    return advice

def location_search_tool(input: LocationSearchInput) -> str:
    """
    T√¨m ki·∫øm ƒë·ªãa ƒëi·ªÉm trong tr∆∞·ªùng
    """
    # S·ª≠ d·ª•ng Milvus ƒë·ªÉ t√¨m ki·∫øm
    results = search_relevant_document_tool(
        SearchRelevantDocumentToolInput(
            query=input.query, 
            collection_name="locations"
        )
    )
    return results[:3]  # Tr·∫£ v·ªÅ top 3 k·∫øt qu·∫£

def quiz_generator_tool(input: QuizInput) -> str:
    """
    T·∫°o c√¢u h·ªèi √¥n t·∫≠p t·ª´ t√†i li·ªáu
    """
    # S·ª≠ d·ª•ng LLM ƒë·ªÉ t·∫°o c√¢u h·ªèi
    prompt = f"T·∫°o 5 c√¢u h·ªèi tr·∫Øc nghi·ªám t·ª´ t√†i li·ªáu sau:\n{input.material}"
    quiz = model.generate(prompt)
    return quiz

def progress_tracker_tool(input: ProgressInput) -> str:
    """
    Theo d√µi ti·∫øn ƒë·ªô h·ªçc t·∫≠p
    """
    progress = len(input.completed) / len(input.total) * 100
    return f"Ti·∫øn ƒë·ªô: {progress:.2f}% - ƒê√£ ho√†n th√†nh {len(input.completed)}/{len(input.total)} b√†i"

def emotion_response_tool(emotion: str) -> str:
    """
    Ph·∫£n h·ªìi theo c·∫£m x√∫c
    """
    responses = {
        "vui": ["Tuy·ªát v·ªùi! üòä", "Th·∫≠t t·ªët khi b·∫°n ƒëang vui!", "H√£y duy tr√¨ tinh th·∫ßn n√†y nh√©!"],
        "bu·ªìn": ["M√¨nh ·ªü ƒë√¢y ƒë·ªÉ gi√∫p b·∫°n ü§ó", "M·ªçi chuy·ªán r·ªìi s·∫Ω t·ªët th√¥i...", "B·∫°n mu·ªën chia s·∫ª th√™m kh√¥ng?"],
        "cƒÉng th·∫≥ng": ["H√≠t th·ªü s√¢u n√†o... üå¨Ô∏è", "B·∫°n c√≥ mu·ªën nghe nh·∫°c th∆∞ gi√£n?", "H√£y ngh·ªâ ng∆°i m·ªôt ch√∫t"]
    }
    return random.choice(responses.get(emotion.lower(), ["M√¨nh lu√¥n s·∫µn s√†ng l·∫Øng nghe b·∫°n ‚ù§Ô∏è"]))

# Initialize all tools
tools = [
    create_faq_tool(collection_name="clubs"),
    create_faq_tool(collection_name="admissions"),
    create_faq_tool(collection_name="benchmarks"),
    Tool(name="schedule_planner", func=schedule_planner_tool, args_schema=ScheduleInput),
    Tool(name="schedule_advisor", func=schedule_advisor_tool, args_schema=ScheduleAdviceInput),
    Tool(name="location_search", func=location_search_tool, args_schema=LocationSearchInput),
    Tool(name="quiz_generator", func=quiz_generator_tool, args_schema=QuizInput),
    Tool(name="progress_tracker", func=progress_tracker_tool, args_schema=ProgressInput),
    Tool(name="emotion_response", func=emotion_response_tool)
]

# Initialize agent
agent = AgentClient(
    model=model,
    system_prompt="""
    B·∫°n l√† tr·ª£ l√Ω gi√°o d·ª•c th√¥ng minh v·ªõi c√°c ch·ª©c nƒÉng:
    1. Qu·∫£n l√Ω l·ªãch h·ªçc, t·∫°o th·ªùi kh√≥a bi·ªÉu
    2. Nh·∫Øc nh·ªü h·ªçc t·∫≠p 10p tr∆∞·ªõc gi·ªù h·ªçc
    3. T∆∞ v·∫•n c·∫£i thi·ªán th·ªùi kh√≥a bi·ªÉu
    4. Tr·∫£ l·ªùi th√¥ng tin tr∆∞·ªùng h·ªçc, CLB
    5. Tra c·ª©u ƒë·ªãa ƒëi·ªÉm trong tr∆∞·ªùng
    6. T·∫°o c√¢u h·ªèi √¥n t·∫≠p
    7. Theo d√µi ti·∫øn ƒë·ªô h·ªçc t·∫≠p
    8. T∆∞∆°ng t√°c ƒëa ph∆∞∆°ng ti·ªán v√† c·∫£m x√∫c
    
    Lu√¥n s·ª≠ d·ª•ng c√¥ng c·ª• ph√π h·ª£p cho t·ª´ng t√°c v·ª•.
    """,
    tools=tools
).create_agent()

# Background task for reminders
async def check_reminders():
    while True:
        user_id = cl.user_session.get("id")
        if schedule := redis_client.get(f"schedule:{user_id}"):
            schedule = json.loads(schedule)
            now = datetime.now()
            current_day = now.strftime("%A")
            current_time = now.strftime("%H:%M")
            
            for task in schedule.get(current_day, []):
                start_time = task.split("-")[0].strip()
                task_time = datetime.strptime(start_time, "%H:%M")
                reminder_time = task_time - timedelta(minutes=10)
                
                if now >= reminder_time and now < task_time:
                    await cl.Message(
                        content=f"‚è∞ Nh·∫Øc nh·ªü: B·∫°n c√≥ m√¥n h·ªçc b·∫Øt ƒë·∫ßu l√∫c {start_time}!"
                    ).send()
        await asyncio.sleep(60)  # Ki·ªÉm tra m·ªói ph√∫t

@cl.on_chat_start
async def start():
    cl.user_session.set("id", str(uuid.uuid4()))
    asyncio.create_task(check_reminders())
    await cl.Message(content="üéì Ch√†o m·ª´ng ƒë·∫øn v·ªõi H·ªá th·ªëng h·ªó tr·ª£ h·ªçc t·∫≠p!").send()

@cl.on_message
async def main(message: cl.Message):
    # X·ª≠ l√Ω c·∫£m x√∫c
    if any(keyword in message.content.lower() for keyword in ["vui", "bu·ªìn", "cƒÉng th·∫≥ng"]):
        emotion = [k for k in ["vui", "bu·ªìn", "cƒÉng th·∫≥ng"] if k in message.content.lower()][0]
        response = emotion_response_tool(emotion)
        await cl.Message(content=response).send()
        return
    
    # X·ª≠ l√Ω y√™u c·∫ßu th√¥ng th∆∞·ªùng
    response = await agent.run(message.content)
    await cl.Message(content=str(response.output)).send()